<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>spring design patterns</title>
    <link href="/2022/09/20/spring-design-patterns/"/>
    <url>/2022/09/20/spring-design-patterns/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring源码中的设计模式"><a href="#Spring源码中的设计模式" class="headerlink" title="Spring源码中的设计模式"></a><strong>Spring源码中的设计模式</strong></h1><h3 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a><strong>设计模式的七大原则</strong></h3><table><thead><tr><th>设计原则名称</th><th>定 义</th><th>使用频率</th></tr></thead><tbody><tr><td>单一职责原则 (Single Responsibility Principle, SRP)</td><td>一个类只负责一个功能领域中的相应职责</td><td>★★★★☆</td></tr><tr><td>开闭原则 (Open-Closed Principle, OCP)</td><td>软件实体应对扩展开放，而对修改关闭</td><td>★★★★★</td></tr><tr><td>里氏代换原则 (Liskov Substitution Principle, LSP)</td><td>所有引用基类对象的地方能够透明地使用其子类的对象</td><td>★★★★★</td></tr><tr><td>依赖倒转原则 (Dependence Inversion Principle, DIP)</td><td>抽象不应该依赖于细节，细节应该依赖于抽象</td><td>★★★★★</td></tr><tr><td>接口隔离原则 (Interface Segregation Principle, ISP)</td><td>使用多个专门的接口，而不使用单一的总接口</td><td>★★☆☆☆</td></tr><tr><td>合成复用原则 (Composite Reuse Principle, CRP)</td><td>尽量使用对象组合，而不是继承来达到复用的目的</td><td>★★★★☆</td></tr><tr><td>迪米特法则 (Law of Demeter, LoD)</td><td>一个软件实体应当尽可能少地与其他实体发生相互作用</td><td>★★★☆☆</td></tr></tbody></table><h3 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a><strong>设计模式的分类</strong></h3><p>![image-20220920160226506](&#x2F;Users&#x2F;lizijun&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220920160226506.png)</p><h3 id="Iterator模式"><a href="#Iterator模式" class="headerlink" title="Iterator模式"></a><strong>Iterator模式</strong></h3><p>​Spring 框架还通过 CompositeIterator 类扩展迭代器模式。该模式主要用于 Java 语言的集合框架中，用于按顺序迭代访问元素</p><h3 id="Adapter-模式"><a href="#Adapter-模式" class="headerlink" title="Adapter 模式"></a><strong>Adapter 模式</strong></h3><p>​<strong>org.springframework.web.reactive#HandlerAdapter</strong><br>​实现 Handler 的类有</p><pre><code class="hljs">  HttpRequestHandlerAdapter (org.springframework.web.servlet.mvc)  SimpleServletHandlerAdapter (org.springframework.web.servlet.handler)  HandlerFunctionAdapter (org.springframework.web.servlet.function.support)  CompositeHandlerAdapter (org.springframework.boot.actuate.autoconfigure.web.servlet)  AbstractHandlerMethodAdapter (org.springframework.web.servlet.mvc.method)  SimpleControllerHandlerAdapter (org.springframework.web.servlet.mvc)</code></pre><p>​spring定义了一个适配器接口，使得每一种Controller有一种对应的适配器实现类，让适配器代替controller执行相应的方法。这样在扩展Controller 时，只需要增加一个适配器类就完成了SpringMVC的扩展了</p><h3 id="Template-Method-模式"><a href="#Template-Method-模式" class="headerlink" title="Template Method 模式"></a><strong>Template Method 模式</strong></h3><p>​org.springframework.context.support#AbstractApplicationContext.refresh()<br>​refresh方法中定义了一套流程，其中postProcessBeanFactory、onRefresh以及一些其他方法中调用的方法，都是延迟到子类中实现，在AbstractApplicationContext类中只是定义了一个空实现，这就是模板方法模式中的钩子方法<br>​Spring 中模版方法具体的实现：<br>![image-20220920160155167](&#x2F;Users&#x2F;lizijun&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220920160155167.png)</p><h3 id="Singleton-模式"><a href="#Singleton-模式" class="headerlink" title="Singleton 模式"></a><strong>Singleton 模式</strong></h3><p>​<strong>org.springframework.beans.factory.support#AbstractBeanFactory.getBean()</strong><br>​Spring的依赖注入（包括lazy-init方式）都是发生在AbstractBeanFactory 的 getBean里。getBean 的 doGetBean方法调用 getSingleton 进行 bean 的创建。lazy-init 方式，在容器初始化时候进行调用，非lazy-init方式，在用户向容器第一次索要bean时进行调用，其中 getSingleton 就是使用双重检索来实现单例 Bean 的创建</p><h3 id="Prototype模式"><a href="#Prototype模式" class="headerlink" title="**Prototype模式   **"></a>**Prototype模式   **</h3><p>​**org.springframework.beans.factory.support#AbstractAutowireCapableBeanFactory.doCreateBean() **<br>​    在创建 Bean 是会校验是否是原型模式，然后通过对象拷贝的方式创建原型对象<br>​<strong>org.springframework.beans.factory.support#RootBeanDefinition.RootBeanDefinition</strong><br>​在创建 BeanDefintion 对象时直接通过 RootBeanDefinition 构造方法设置各种属性和值创建对象</p><h3 id="Builder模式"><a href="#Builder模式" class="headerlink" title="Builder模式"></a><strong>Builder模式</strong></h3><p>​<strong>org.springframework.web.util#UriComponents</strong><br>​处理 URL 将其处理以后封装为 UriComponents 返回<br>​***(扩展：JDK 中 StringBuilder 中 实现了 Append 方法也是 Builder 模式的一种实现)**</p><h3 id="Abstract-Factory-模式"><a href="#Abstract-Factory-模式" class="headerlink" title="Abstract Factory 模式"></a><strong>Abstract Factory 模式</strong></h3><p>​<strong>org.springframework.beans.factory#BeanFactory</strong><br>​在 Spring 中，BeanFactory 是用于管理 Bean 的一个工厂，所有工厂都是 BeanFactory 的子类。这样我们可以通过 IOC 容器来管理访问 Bean，根据不同的策略调用 getBean() 方法，从而获得具体对象<br>​BeanFactory 的子类主要有：</p><pre><code class="hljs">   ClassPathXmlApplicationContext   XmlWebApplicationContext   StaticWebApplicationContext   StaticApplicationContext</code></pre><p>在 Spring 中，DefaultListableBeanFactory 实现了所有工厂的公共逻辑</p><hr><h3 id="Bridge-模式"><a href="#Bridge-模式" class="headerlink" title="Bridge 模式"></a><strong>Bridge 模式</strong></h3><p>​<strong>org.springframework.core#BridgeMethodResolver</strong><br>​这个桥接解析器的作用是通过桥接方法，找到桥接方法对应的原始方法。当一个子类在继承（或实现）一个父类（或接口）的泛型方法时，在子类中明确指定了泛型类型，那么在编译时编译器会自动生成桥接方法。BridgeMethodResolve 就是通过判断方法名、参数的个数以及泛型类型参数来获取原始的方法。具体实现：</p><ol><li>如果不是桥接，就直接返回</li><li>先从本地缓存独取，缓存中有则直接返回</li><li>以方法名称和入参格式相等进行筛选</li><li>递归该类及其父类所有的方法，符合条件就添加进来</li><li>如果符合条件就直接采用，否则，调用searchCandidates方法再次筛选。</li><li>如果找不到实际方法，则返回原来的桥连方法。</li><li>结果放入缓存。</li></ol><h3 id="Strategy-模式"><a href="#Strategy-模式" class="headerlink" title="Strategy 模式"></a><strong>Strategy 模式</strong></h3><p>​<strong>org.springframework.beans.factory.support#InstantiationStrategy</strong><br>​创建 bean 实例是有三种策略：</p><pre><code class="hljs">   基于无参构造函数创建 bean 实例   基于指定构造函数创建 bean 实例   基于工厂方法创建 bean 实例</code></pre><p>​<strong>org.springframework.beans.factory.support#BeanDefinitionReader</strong><br>​读取 Bean 相关定义的类</p><pre><code class="hljs">   Groovy BeanDefinitionReader   PropertiesBeanDefinitionReader   XmlBeanDefinitionReader   ConfigurationClassBeanDefinitionReader</code></pre><p>​通过不同的策略从不同的文件源读取 BeanDefinition<br>​定义 BeanName 的接口<br>​<strong>org.springframework.beans.factory.support#BeanNameGenerator</strong></p><pre><code class="hljs">   DefaultBeanNameGenerator   AnnotationBeanNameGenerator</code></pre><p>​通过不同的方式生成对应 Bean 的名字<br>​获取资源的接口<br>​<strong>org.springframework.core.io#ResourceLoader</strong></p><pre><code class="hljs">   ClassRelativeResourceLoader   DefaultResourceLoader   FileSystemResourceLoader   ResourcePatternResolver</code></pre><p>通过不同的方式获取资源</p><h3 id="Composite-模式"><a href="#Composite-模式" class="headerlink" title="Composite 模式"></a><strong>Composite 模式</strong></h3><p>​<strong>org.springframework.cache.support.CompositeCacheManager</strong><br>​组合缓存管理器 CompositeCacheManager：<br>​CompositeCacheManager 自己实现了 CacheManager，并将多个 CacheManager 组合到成员变量中，一般用于对多个缓存进行合并，按照同一个缓存方式进行处理</p><h3 id="Decorator-模式"><a href="#Decorator-模式" class="headerlink" title="Decorator 模式"></a><strong>Decorator 模式</strong></h3><p>​<strong>org.springframework.cache.transaction#TransactionAwareCacheDecorator</strong><br>​TransactionAwareCacheDecorator 类相当于装饰器模式中的抽象装饰角色，主要用来处理事务缓存<br>Spring 的 ApplicationContext 中配置所有的 DataSource。这些 DataSource 可能是各种不同类型的， 比如不同的数据库：Oracle、 SQL Server、 MySQL 等， 也可能是不同的数据源。然后 SessionFactory 根据客户的每次请求， 将 DataSource 属性设置成不同的数据源， 以到达切换数据源的目的。<br>在 spring 的命名体现：Spring 中用到的包装器模式在类名上有两种表现：一种是类名中含有 Wrapper， 另一种是类名中含有Decorator。基本上都是动态地给一个对象添加一些额外的职责，比如</p><ul><li>org.springframework.cache.transaction 包下的 TransactionAwareCacheDecorator 类</li><li>org.springframework.session.web.http 包下的 SessionRepositoryFilter 内部类 SessionRepositoryRequestWrapper</li></ul><h3 id="Visitor模式"><a href="#Visitor模式" class="headerlink" title="Visitor模式"></a><strong>Visitor模式</strong></h3><p>​<strong>org.springframework.beans.factory.config#BeanDefinitionVisitor</strong><br>​BeanDefinition 为 Spring Bean 的定义信息，在 Spring 解析完配置后，会生成 BeanDefinition 并且记录下来。下次通过 getBean 获取 Bean 的时候，会通过  BeanDefinition 来实例化具体的 Bean 对象。<br>​Spring 的 BeanDefinitionVisitor 用来访问 BeanDefinition。<br>​抽象元素为 BeanDefinition。对 Bean 的定义信息，比如属性值、构造方法参数或者更具体的实现。<br>​具体元素有 RootBeanDefinition、ChildBeanDefinition、GenericBeanDefinition 等等。<br>​因为没有对访问者进行扩展，所以只有一个具体访问者 BeanDefinitionVisitor<br>​访问的具体调用就是visitor.visitBeanDefinition(bd);</p><h3 id="Chain-of-Responsibility-模式"><a href="#Chain-of-Responsibility-模式" class="headerlink" title="Chain of.Responsibility 模式"></a><strong>Chain of.Responsibility 模式</strong></h3><p>​<strong>org.springframework.web.servlet#HandlerInterceptor</strong><br>​HandlerInterceptor接口在web开发中非常常用，里面有preHandle()、postHandle()、afterCompletion()三个方法，实现这三个方法可以分别在调用”Controller”方法之前，调用”Controller”方法之后渲染”ModelAndView”之前，以及渲染”ModelAndView”之后执行。<br>​<strong>org.springframework.aop.framework#JdkDynamicAopProxy</strong><br>​首先获取目标方法所有的拦截器然后在没有拦截器则直接反射调用目标方法，再生成动态代理的责任链，最后根据生成的责任链去执行对应的流程</p><h3 id="Facade-模式"><a href="#Facade-模式" class="headerlink" title="Facade 模式"></a><strong>Facade 模式</strong></h3><p>​<strong>org.springframework.core.io#ResourceLoader</strong><br>​在spring容器中该接口提供了一个统一接口用于访问各种资源（如：文件、流、网络url资源等等)，相当于Facade的一个资源访问子系统</p><h3 id="Mediator-模式"><a href="#Mediator-模式" class="headerlink" title="Mediator 模式"></a><strong>Mediator 模式</strong></h3><p>​<strong>java.util.Timer#schedule</strong><br>​所有的task都放入了Timer类中维护的task队列中。所以Timer就是充当了一个中介者的角色，而task队列内的任务就是具体同事对象。<br>SpringMVC 中 control 层就相当于中介去管理 View And Modle 层</p><h3 id="Observer模式"><a href="#Observer模式" class="headerlink" title="Observer模式"></a><strong>Observer模式</strong></h3><ol><li>事件：ApplicationEvent 是所有事件对象的父类。ApplicationEvent 继承自 jdk 的 EventObject, 所有的事件都需要继承 ApplicationEvent, 并且通过 source 得到事件源。Spring 也为我们提供了很多内置事件，ContextRefreshedEvent、ContextStartedEvent、ContextStoppedEvent、ContextClosedEvent、RequestHandledEvent。</li><li>事件监听：ApplicationListener，也就是观察者，继承自 jdk 的 EventListener，该类中只有一个方法 onApplicationEvent。当监听的事件发生后该方法会被执行。</li><li>事件源：ApplicationContext，ApplicationContext 是 Spring 中的核心容器，在事件监听中 ApplicationContext 可以作为事件的发布者，也就是事件源。因为 ApplicationContext 继承自 ApplicationEventPublisher。在 ApplicationEventPublisher 中定义了事件发布的方法：publishEvent(Object event)</li><li>事件管理：ApplicationEventMulticaster，用于事件监听器的注册和事件的广播。监听器的注册就是通过它来实现的，它的作用是把 Applicationcontext 发布的 Event 广播给它的监听器列表。</li></ol><p>广播上下文事件，由监听器进行监听处理<br>![image-20220920160303973](&#x2F;Users&#x2F;lizijun&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220920160303973.png)</p><h3 id="Memento-模式"><a href="#Memento-模式" class="headerlink" title="Memento 模式"></a><strong>Memento 模式</strong></h3><p>​备忘录模式在框架源码中的应用是比较少的，主要还是结合具体的应用场景来使用。 在Spring的Webflow源码中找到一个StateManageableMessageContext接口，我们看到有一个 createMessagesMemento(）方法,创建一个消息备忘录</p><h3 id="State-模式"><a href="#State-模式" class="headerlink" title="State 模式"></a><strong>State 模式</strong></h3><p>​Spring中的提供一个组件名称就叫作状态机（StateMachine），状态机帮助开发者简化状态控制的开发过程，让状态机结构更加层次化。</p><h3 id="Flyweight-Pattern-模式"><a href="#Flyweight-Pattern-模式" class="headerlink" title="Flyweight Pattern 模式"></a><strong>Flyweight Pattern 模式</strong></h3><p>​享元模式，JDK 中对象池的运用（String，Integer，Long….）<br>​Spring Bean工厂中存储 Bean 对象的集合<br>​数据连接池（Data Source Pool）</p><h3 id="Proxy-模式"><a href="#Proxy-模式" class="headerlink" title="Proxy 模式"></a><strong>Proxy 模式</strong></h3><p>![image-20220920160324400](&#x2F;Users&#x2F;lizijun&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220920160324400.png)</p><h3 id="Command-模式"><a href="#Command-模式" class="headerlink" title="Command 模式"></a><strong>Command 模式</strong></h3><p><strong>org.springframework.jdbc.core#JdbcTemplate</strong></p><ul><li>StatementCallback 接口 ,类似命令接口(Command)</li><li>class QueryStatementCallback implements StatementCallback<T>, SqlProvider , 匿名内部类， 实现了命令接口， 同时也充当命令接收者</li><li>命令调用者 是 JdbcTemplate , 其中 execute(StatementCallback<T> action) 方法中，调用 action.doInStatement 方法. 不同的 实现 StatementCallback 接口的对象，对应不同的 doInStatemnt  实现逻辑</li><li>另外实现  StatementCallback 命令接口的子类还有 QueryStatementCallback</li></ul><h3 id="Interpreter-模式"><a href="#Interpreter-模式" class="headerlink" title="Interpreter 模式"></a><strong>Interpreter 模式</strong></h3><p>org.springframework.expression#ExpressionParser<br>在 Spring 中，ExpressionParser 接口内部采用的也是解释器模式，它封装了字符串表达式的语法</p><blockquote><p><a href="https://book.douban.com/subject/26933281/">《图解设计模式》</a><br>[Spring 中的设计模式](</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Source code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git commit emoji</title>
    <link href="/2022/09/05/commit-emoji/"/>
    <url>/2022/09/05/commit-emoji/</url>
    
    <content type="html"><![CDATA[<h1 id="git-commit-emoji-使用指南"><a href="#git-commit-emoji-使用指南" class="headerlink" title="git commit emoji 使用指南"></a>git commit emoji 使用指南</h1><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><!-- vim-markdown-toc GFM --><ul><li><a href="#commit-%E6%A0%BC%E5%BC%8F">commit 格式</a></li><li><a href="#emoji-%E6%8C%87%E5%8D%97">emoji 指南</a></li><li><a href="#%E5%8F%82%E8%80%83">参考</a><ul><li><a href="#git-commit-emoji">git commit emoji</a></li><li><a href="#write-a-good-commit-message">write a good commit message</a></li></ul></li></ul><!-- vim-markdown-toc --><p>执行 <code>git commit</code> 时使用 emoji 为本次提交打上一个 “标签”, 使得此次 commit 的主要工作得以凸现，也能够使得其在整个提交历史中易于区分与查找。</p><h3 id="commit-格式"><a href="#commit-格式" class="headerlink" title="commit 格式"></a>commit 格式</h3><p><code>git commit</code> 时，提交信息遵循以下格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">:emoji1: :emoji2: 不超过 50 个字的摘要，首字母大写，使用祈使语气，句末不要加句号<br><br>提交信息主体<br><br>引用相关 issue 或 PR 编号 &lt;<span class="hljs-comment">#110&gt;</span><br></code></pre></td></tr></table></figure><p>初次提交示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git commit -m <span class="hljs-string">&quot;:tada: Initialize Repo&quot;</span><br></code></pre></td></tr></table></figure><h3 id="emoji-指南"><a href="#emoji-指南" class="headerlink" title="emoji 指南"></a>emoji 指南</h3><table><thead><tr><th align="left">emoji</th><th align="left">emoji 代码</th><th align="left">commit 说明</th></tr></thead><tbody><tr><td align="left">:tada: (庆祝)</td><td align="left"><code>:tada:</code></td><td align="left">初次提交</td></tr><tr><td align="left">:new: (全新)</td><td align="left"><code>:new:</code></td><td align="left">引入新功能</td></tr><tr><td align="left">:bookmark: (书签)</td><td align="left"><code>:bookmark:</code></td><td align="left">发行&#x2F;版本标签</td></tr><tr><td align="left">:bug: (bug)</td><td align="left"><code>:bug:</code></td><td align="left">修复 bug</td></tr><tr><td align="left">:ambulance: (急救车)</td><td align="left"><code>:ambulance:</code></td><td align="left">重要补丁</td></tr><tr><td align="left">:globe_with_meridians: (地球)</td><td align="left"><code>:globe_with_meridians:</code></td><td align="left">国际化与本地化</td></tr><tr><td align="left">:lipstick: (口红)</td><td align="left"><code>:lipstick:</code></td><td align="left">更新 UI 和样式文件</td></tr><tr><td align="left">:clapper: (场记板)</td><td align="left"><code>:clapper:</code></td><td align="left">更新演示&#x2F;示例</td></tr><tr><td align="left">:rotating_light: (警车灯)</td><td align="left"><code>:rotating_light:</code></td><td align="left">移除 linter 警告</td></tr><tr><td align="left">:wrench: (扳手)</td><td align="left"><code>:wrench:</code></td><td align="left">修改配置文件</td></tr><tr><td align="left">:heavy_plus_sign: (加号)</td><td align="left"><code>:heavy_plus_sign:</code></td><td align="left">增加一个依赖</td></tr><tr><td align="left">:heavy_minus_sign: (减号)</td><td align="left"><code>:heavy_minus_sign:</code></td><td align="left">减少一个依赖</td></tr><tr><td align="left">:arrow_up: (上升箭头)</td><td align="left"><code>:arrow_up:</code></td><td align="left">升级依赖</td></tr><tr><td align="left">:arrow_down: (下降箭头)</td><td align="left"><code>:arrow_down:</code></td><td align="left">降级依赖</td></tr><tr><td align="left">:zap: (闪电)<br>:racehorse: (赛马)</td><td align="left"><code>:zap:</code><br><code>:racehorse:</code></td><td align="left">提升性能</td></tr><tr><td align="left">:chart_with_upwards_trend: (上升趋势图)</td><td align="left"><code>:chart_with_upwards_trend:</code></td><td align="left">添加分析或跟踪代码</td></tr><tr><td align="left">:rocket: (火箭)</td><td align="left"><code>:rocket:</code></td><td align="left">部署功能</td></tr><tr><td align="left">:white_check_mark: (白色复选框)</td><td align="left"><code>:white_check_mark:</code></td><td align="left">增加测试</td></tr><tr><td align="left">:memo: (备忘录)<br>:book: (书)</td><td align="left"><code>:memo:</code><br><code>:book:</code></td><td align="left">撰写文档</td></tr><tr><td align="left">:hammer: (锤子)</td><td align="left"><code>:hammer:</code></td><td align="left">重大重构</td></tr><tr><td align="left">:art: (调色板)</td><td align="left"><code>:art:</code></td><td align="left">改进代码结构&#x2F;代码格式</td></tr><tr><td align="left">:fire: (火焰)</td><td align="left"><code>:fire:</code></td><td align="left">移除代码或文件</td></tr><tr><td align="left">:pencil2: (铅笔)</td><td align="left"><code>:pencil2:</code></td><td align="left">修复 typo</td></tr><tr><td align="left">:construction: (施工)</td><td align="left"><code>:construction:</code></td><td align="left">工作进行中</td></tr><tr><td align="left">:wastebasket: (垃圾桶)</td><td align="left"><code>:wastebasket:</code></td><td align="left">废弃或删除</td></tr><tr><td align="left">:wheelchair: (轮椅)</td><td align="left"><code>:wheelchair:</code></td><td align="left">可访问性</td></tr><tr><td align="left">:construction_worker: (工人)</td><td align="left"><code>:construction_worker:</code></td><td align="left">添加 CI 构建系统</td></tr><tr><td align="left">:green_heart: (绿心)</td><td align="left"><code>:green_heart:</code></td><td align="left">修复 CI 构建问题</td></tr><tr><td align="left">:lock: (锁)</td><td align="left"><code>:lock:</code></td><td align="left">修复安全问题</td></tr><tr><td align="left">:whale: (鲸鱼)</td><td align="left"><code>:whale:</code></td><td align="left">Docker 相关工作</td></tr><tr><td align="left">:apple: (苹果)</td><td align="left"><code>:apple:</code></td><td align="left">修复 macOS 下的问题</td></tr><tr><td align="left">:penguin: (企鹅)</td><td align="left"><code>:penguin:</code></td><td align="left">修复 Linux 下的问题</td></tr><tr><td align="left">:checkered_flag: (旗帜)</td><td align="left"><code>:checkered_flag:</code></td><td align="left">修复 Windows 下的问题</td></tr><tr><td align="left">:twisted_rightwards_arrows: (交叉箭头)</td><td align="left"><code>:twisted_rightwards_arrows:</code></td><td align="left">分支合并</td></tr></tbody></table><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><h4 id="git-commit-emoji"><a href="#git-commit-emoji" class="headerlink" title="git commit emoji"></a>git commit emoji</h4><ul><li><a href="https://github.com/carloscuesta/gitmoji/">gitmoji</a></li><li><a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/">emoji-cheat-sheet</a></li><li><a href="https://github.com/slashsBin/styleguide-git-commit-message">styleguide-git-commit-message</a></li><li><a href="https://github.com/atom/atom/blob/master/CONTRIBUTING.md#git-commit-messages">atom git commit messages guide</a></li><li><a href="https://gitmoji.carloscuesta.me/">An emoji guide for your commit messages</a></li><li><a href="https://www.h5jun.com/post/gitmoji.html">程序员提交代码的 emoji 指南——原来表情文字不能乱用</a></li><li><a href="https://github.com/ant-design/ant-design/wiki/%E8%BD%AE%E5%80%BC%E8%A7%84%E5%88%99%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B#emoji-for-changelog">Ant Design 更新日志 emoji 规范</a></li></ul><h4 id="write-a-good-commit-message"><a href="#write-a-good-commit-message" class="headerlink" title="write a good commit message"></a>write a good commit message</h4><ul><li><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">A Note About Git Commit Messages</a></li><li><a href="https://news.ycombinator.com/item?id=13889155">How to write a Git Commit Message (2014)</a></li><li><a href="https://github.com/joelparkerhenderson/git_commit_message">how to write a good git commit message</a></li><li><a href="https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message">5 Useful Tips For A Better Commit Message</a></li><li><a href="http://udacity.github.io/git-styleguide/">Udacity Git Commit Message Style Guide</a></li><li>[How to commit a change with both “message” and “description” from the command line?](</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些常用的 Vim 操作</title>
    <link href="/2022/09/04/vim-operation/"/>
    <url>/2022/09/04/vim-operation/</url>
    
    <content type="html"><![CDATA[<h2 id="vim相关操作（简略版）"><a href="#vim相关操作（简略版）" class="headerlink" title="vim相关操作（简略版）"></a>vim相关操作（简略版）</h2><p><strong>备注：</strong></p><ol><li>编辑模式：vim进入文档以后，按下 insert 或者 i</li><li>命令模式：直接 vim 打开文件或者在编辑模式下按下ESC</li></ol><ul><li><p><strong>复制</strong></p><ul><li>单行复制<ul><li>在命令模式下，将光标移动到将要复制的行处，按“yy”进行复制</li></ul></li><li>多行复制<ul><li>在命令模式下，复制光标所在的向下n行，按“nyy”多行复制</li></ul></li></ul></li><li><p><strong>粘贴</strong></p><ul><li>直接复制，在命令模式下，按“p”粘贴</li></ul></li><li><p><strong>删除</strong></p><ul><li>单行删除<ul><li>在命令模式下，将光标移动到将要删除的行处，按“dd”进行删除</li></ul></li><li>部分字段删除<ul><li>在命令模式下，按下”dw”删除当前行光标之后的所有值</li></ul></li><li>多行删除<ul><li>在命令模式下，按下”ndd”,n为数字，删除当前光标之后的 n 行数据</li></ul></li></ul></li><li><p><strong>撤销</strong></p><ul><li>撤销<ul><li>在命令模式下，按下“u”,撤销上一步操作</li></ul></li><li>取消撤销<ul><li>在命令模式下，按“Ctrl+r”,取消上一步撤销操作</li></ul></li></ul></li><li><p><strong>查找</strong></p><ul><li>向后查找<ul><li>在命令模式下，按下”&#x2F;word”,word为需要查找的内容</li></ul></li><li>向前查找<ul><li>在命令模式下，按下”?word”,word为需要查找的内容</li></ul></li></ul></li><li><p><strong>显示行号</strong></p><ul><li>在命令模式下“:set number”即可显示行号</li></ul></li><li><p><strong>跳到指定行</strong></p><ul><li><p>跳到首行</p><ul><li>在命令模式下，按下gg</li></ul></li><li><p>跳到最后一行</p><ul><li>在命令模式下，按下shift+g</li></ul></li><li><p>跳到指定行</p><ul><li>在命令模式下，按下n+shift+g,n就是指定的行号</li></ul></li></ul></li></ul><blockquote><p>持续更新ing～</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
